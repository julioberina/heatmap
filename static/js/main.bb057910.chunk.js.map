{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","daysOfWeek","heat","bind","assertThisInitialized","reset","displayHeat","i","push","days","e","_this2","preventDefault","ptag","document","getElementById","url","value","axios","get","then","response","temp","JSON","stringify","setState","catch","error","newdata","day","react_default","a","createElement","key","map","obj","className","align","id","type","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb057910.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      daysOfWeek: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    };\n\n    this.heat = this.heat.bind(this);\n    this.reset = this.reset.bind(this);\n    this.displayHeat = this.displayHeat.bind(this);\n\n    for (let i = 0; i < 52; ++i) {\n      this.state.data.push({\"days\": [0, 0, 0, 0, 0, 0, 0]})\n    }\n  }\n\n  heat(e) {\n    e.preventDefault();\n\n    let ptag = document.getElementById(\"errormessage\");\n    let url = 'https://api.github.com/repos/';\n    url = url + document.getElementById(\"username\").value + '/';\n    url = url + document.getElementById(\"reponame\").value + '/stats/';\n    url = url + 'commit_activity?Accept=application/vnd.github.v3+json';\n\n      axios.get(url)\n           .then(response => {\n             let temp = JSON.stringify(response.data);\n\n             if (temp === '[]' || temp === '{}') {\n               ptag.value = 'Request failed to get data. Try pressing submit again';\n             } else {\n               ptag.value = '';\n               this.setState({ data: response.data });\n             }\n           })\n           .catch(error => {\n             ptag.value = 'Type a valid username and a valid repo from the Github user';\n           })\n  }\n\n  reset(e) {\n    e.preventDefault();\n    let newdata = [];\n\n    for (let i = 0; i < 52; ++i) {\n      newdata.push({\"days\": [0, 0, 0, 0, 0, 0, 0]})\n    }\n\n    document.getElementById(\"username\").value = \"\";\n    document.getElementById(\"reponame\").value = \"\";\n    document.getElementById(\"errormessage\").value = \"\";\n    this.setState({ data: newdata });\n  }\n\n  displayHeat(day) {\n    let i = 0;\n\n    return (\n      <tr>\n        <td key={day*53+(i++)}>{this.state.daysOfWeek[day]}</td>\n        {\n          this.state.data.map((obj) => {\n            return (<td className={obj.days[day] === 0 ? \"uncommitted\" : \"committed\"} key={day*53+(i++)}></td>)\n          })\n        }\n      </tr>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <div align=\"center\" className=\"top\">\n          <h1>Github Repo Heatmap</h1>\n        </div>\n\n        <div align=\"center\" className=\"container\">\n          <input id=\"username\" type=\"text\" placeholder=\"Enter Github Username\" />\n          <input id=\"reponame\" type=\"text\" placeholder=\"Enter Github Repository Name\" />\n        </div>\n\n        <br />\n\n        <div align=\"center\">\n          <button type=\"submit\" className=\"submitInfo\" onClick={this.heat}>Submit</button>\n          <button className=\"resetInfo\" onClick={this.reset}>Reset</button>\n        </div>\n\n        <br />\n        <p id=\"errormessage\">paragrapha text</p>\n\n        <div align=\"center\" className=\"heatmap\">\n          <h3>Yearly Heatmap</h3>\n          <p>Weeks (1-52)</p>\n          <table>\n            <tbody>\n              {this.displayHeat(0)}\n              {this.displayHeat(1)}\n              {this.displayHeat(2)}\n              {this.displayHeat(3)}\n              {this.displayHeat(4)}\n              {this.displayHeat(5)}\n              {this.displayHeat(6)}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}